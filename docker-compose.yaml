version: '3'

services:
  source_postgres:
    image: postgres:15
    ports:
      - '5433:5432'
    networks:
      - elt_network
    environment:
      POSTGRES_DB: source_db
      POSTGRES_USER: ${psql_user_1}
      POSTGRES_PASSWORD: ${psql_secret_1}
    volumes:
      - ./source_db_init/init.sql:/docker-entrypoint-initdb.d/init.sql

  destination_postgres:
    image: postgres:15
    ports:
      - '5434:5432'
    networks:
      - elt_network
    environment:
      POSTGRES_DB: destination_db
      POSTGRES_USER: ${psql_user_2}
      POSTGRES_PASSWORD: ${psql_secret_2}
#
#  elt_script:
#    build:
#      context: ./elt # Directory containing the Dockerfile and elt_script.py
#      dockerfile: Dockerfile # Name of the Dockerfile, if it's something other than "Dockerfile", specify here
#    command: ['python', 'elt_script.py']
#    networks:
#      - elt_network
#    depends_on:
#      - source_postgres
#      - destination_postgres
#
#  dbt:
#    image: ghcr.io/dbt-labs/dbt-postgres:1.8.2
#    command: ["run"]
#    networks:
#      - elt_network
#    volumes:
#      - ./custom_postgres:/usr/app
#      - ~/.dbt/:/root/.dbt/
#
#    depends_on:
#      elt_script:
#        condition: service_completed_successfully
#
#    environment:
#      DBT_PROFILE: custom_postgres
#      DBT_TARGET: dev

  postgres:
    image: postgres:15
    networks:
      - elt_network
    environment:
      POSTGRES_DB: airflow
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow

  init-airflow:
    image: apache/airflow:latest
    depends_on:
      - postgres
    networks:
      - elt_network
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    command: >
      bash -c "airflow db init &&
      airflow users create --username ${airflow_user} --password ${airflow_secret} --firstname John --lastname Doe --role Admin --email example@example.com"

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    user: root
    depends_on:
      - postgres
    networks:
      - elt_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./elt:/opt/airflow/elt
      #- ./custom_postgres:/opt/usr/app
      #- ~/.dbt/:/root/.dbt
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - LOAD_EX=n
      - EXECUTOR=Local
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW_CONN_DESTINATION_POSTGRES=postgres://postgres:secret@destination_postgres:5434/destination_db
      - AIRFLOW__CORE__FERNET_KEY=${fern_key}
      - AIRFLOW__WEBSERVER__DEFAULT_USER_USERNAME=${airflow_user}
      - AIRFLOW__WEBSERVER__DEFAULT_USER_PASSWORD=${airflow_secret}
      - AIRFLOW_WWW_USER_USERNAME=${airflow_user}
      - AIRFLOW_WWW_USER_PASSWORD=${airflow_secret}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${airflow_secret}
    command:
      - scheduler

  webserver:
    build:
      context: .
      dockerfile: Dockerfile
    user: root
    depends_on:
      - postgres
    networks:
      - elt_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./elt:/opt/airflow/elt
      - ./custom_postgres:/opt/usr/app
      - ~/.dbt/:/root/.dbt
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - LOAD_EX=n
      - EXECUTOR=Local
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW_CONN_DESTINATION_POSTGRES=postgres://postgres:secret@destination_postgres:5434/destination_db
      - AIRFLOW__CORE__FERNET_KEY=${fern_key}
      - AIRFLOW__WEBSERVER__DEFAULT_USER_USERNAME=${airflow_user}
      - AIRFLOW__WEBSERVER__DEFAULT_USER_PASSWORD=${airflow_secret}
      - AIRFLOW_WWW_USER_USERNAME=${airflow_user}
      - AIRFLOW_WWW_USER_PASSWORD=${airflow_secret}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${airflow_secret}
    ports:
      - "8080:8080"
    command:
      - webserver

networks:
  elt_network:
    driver: bridge


volumes:
  destination_db_data: